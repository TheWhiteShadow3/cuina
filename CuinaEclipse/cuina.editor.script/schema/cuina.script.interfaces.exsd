<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="cuina.editor.script" xmlns="http://www.w3.org/2001/XMLSchema">
<annotation>
      <appinfo>
         <meta.schema plugin="cuina.editor.script" id="cuina.script.interfaces" name="Cuina Script Interfaces"/>
      </appinfo>
      <documentation>
         Eine Interface Definition für eine Skript-Klasse.
      </documentation>
   </annotation>

   <element name="extension">
      <annotation>
         <appinfo>
            <meta.element />
         </appinfo>
      </annotation>
      <complexType>
         <choice>
            <element ref="class" minOccurs="1" maxOccurs="unbounded"/>
         </choice>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="class">
      <complexType>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  Eindeutigeer Name des Interfaces.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="interface" type="string" use="required">
            <annotation>
               <documentation>
                  Ein Interface für eine Skript-Klasse.
Die Signaturn der Methoden müssen gültige Ruby-Bezeichner sein und müssen sich im Namen oder Anzahl der Argumente unterscheiden.
&lt;b&gt;Methoden, die sich nur im Datentypen unterscheiden sind nicht erlaubt!&lt;/b&gt;
               </documentation>
               <appinfo>
                  <meta.attribute kind="java"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="module" type="string" use="required">
            <annotation>
               <documentation>
                  Modul über dem auf das Interface Zugegriffen werden kann.
Default ist Java::PackageInCamelcase
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appinfo>
         <meta.section type="since"/>
      </appinfo>
      <documentation>
         [Enter the first release in which this extension point appears.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="examples"/>
      </appinfo>
      <documentation>
         [Enter extension point usage example here.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="apiinfo"/>
      </appinfo>
      <documentation>
         [Enter API information here.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="implementation"/>
      </appinfo>
      <documentation>
         [Enter information about supplied implementation of this extension point.]
      </documentation>
   </annotation>


</schema>
