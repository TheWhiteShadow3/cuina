
attribute vec3 tangent;
varying vec3 faceNormal;
varying vec3 vertexNormal;
varying float lightDist;
varying vec3 lightVec;
varying vec3 halfVec;
varying vec3 eyeVec;

void main()
{
	gl_TexCoord[0] =  gl_MultiTexCoord0;
	//faceNormal = normalize(vec3(gl_ModelViewMatrix * vec4(gl_Normal, 0)));
	// Building the matrix Eye Space -> Tangent Space
	vec3 n = normalize (gl_NormalMatrix * gl_Normal);
	vec3 t = normalize (gl_NormalMatrix * vec3(-1, 0, 0));
	vec3 b = cross (n, t);
	
	vec3 vertexPosition = vec3(gl_ModelViewMatrix * gl_Vertex);
	vec3 lightDir = normalize(gl_LightSource[0].position.xyz - vertexPosition);
		
	// transform light and half angle vectors by tangent basis
	vec3 v;
	v.x = dot (lightDir, t);
	v.y = dot (lightDir, b);
	v.z = dot (lightDir, n);
	lightDist = length(gl_LightSource[0].position.xyz - vertexPosition);

	lightVec = normalize(vertexPosition - gl_LightSource[0].position.xyz);
	//lightVec = normalize (v);
	
	v.x = dot (gl_Normal, t);
	v.y = dot (gl_Normal, b);
	v.z = dot (gl_Normal, n);
	faceNormal = gl_Normal;
	
	v.x = dot (vertexPosition, t);
	v.y = dot (vertexPosition, b);
	v.z = dot (vertexPosition, n);
	eyeVec = normalize (v);
	
	vertexPosition = normalize(vertexPosition);
	
	/* Normalize the halfVector to pass it to the fragment shader */

	// No need to divide by two, the result is normalized anyway.
	// vec3 halfVector = normalize((vertexPosition + lightDir) / 2.0); 
	vec3 halfVector = normalize(vertexPosition + lightDir);
	v.x = dot (halfVector, t);
	v.y = dot (halfVector, b);
	v.z = dot (halfVector, n);

	// No need to normalize, t,b,n and halfVector are normal vectors.
	//normalize (v);
	halfVec = v ; 
	gl_Position = ftransform();
}